#!/bin/sh

usage() {
	echo "Astro v0.10.0: Browse the gemini web on the terminal."
	echo ""
	echo "Usage: astro [url]|[option]"
	echo ""
	echo "Options:"
	echo "  -h		show this help"
	echo "  --help	show this help"
	echo "  --version	show version info"
	echo ""
	echo "Commands available inside the browser:"
	echo "  q	quit"
	echo "  g	go to a link"
	echo "  r	reload current page"
	echo "  b	go back one page"
	echo "  o	open an address"
	echo "  s	save current page"
	echo "  H	go to homepage"
	echo "  m	add bookmark"
	echo "  M	go to a bookmark"
	echo ""
	echo "Examples:"
	echo "  astro		Start browsing the default webpage"
	echo "  astro url	Start browsing url"
	echo "  astro --help	Show help"
	echo ""
	echo "Debugging:"
	echo "  debug=1 astro	Will start astro in debug mode"
	echo ""
	echo "Report bugs to: bleemayer@gmail.com"
	echo "Home page: <https://www.github.com/blmayer/astro/>"
	echo "General help: <https://www.github.com/blmayer/astro/wiki>"
}

version() {
	echo "astro 0.14.0"
	echo "Copyright (C) 2021 Brian Mayer."
	echo "License MIT: MIT License <https://opensource.org/licenses/MIT>"
	echo "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,"
	echo "EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF"
	echo "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT."
	echo ""
	echo "Written by Brian Lee Mayer."
}

getprevious() {
	sed -i '$d' "$histfile"
	prev="$(tail -n 1 "$histfile")"
	sed -i '$d' "$histfile"
	echo "$prev"
}

# Returns the complete url scheme with gemini defaults
# Parameters: url
parseurl() {
	# shellcheck disable=SC2154
	[ "$debug" ] && echo "Parsing: $1" >&2 && sleep 2
	IFS='|' read -r proto hostport path rest << EOF
$(echo "$1" | sed -E 's@^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?@\2\|\4\|\5\|\7@g')
EOF

	[ "$debug" ] && echo "Parsed URL: proto: $proto host: $hostport path: $path" >&2 && sleep 2
	if [ "$oldhost" ] && [ "$(echo "$hostport" | sed 's/ //g')" = "" ]
	then
		hostport="$oldhost"
	elif [ "$hostport" = "" ]
	then
		hostport="${path%%/}"
		path=
	fi

	IFS=':' read -r host port << EOF
$hostport
EOF

	# Check path continuation
	if [ "$oldhost" = "$host" ]
	then
		: "${oldpath:=}"
		case "$path" in
			"/"*) ;;
			*) path="$oldpath$path" ;;
		esac
	fi
	[ "$debug" ] && echo "Response: proto: ${proto:-gemini} host: $host port: ${port:-1965} path: ${path#/}" >&2 && sleep 2
	echo "${proto:-gemini}" "$host" "${port:-1965}" "${path#/}" "$rest"
	return 0
}


# Fetches the gemini response from server
# Parameters: proto, host, port and path
# Spec draft is here: https://gemini.circumlunar.space/docs/specification.html
fetch() {
	# Some setup first
	cols=$(tput cols)
	width=$((cols - (2*margin)))
	[ "$debug" ] && echo "Text width: $width" >&2

	[ "$debug" ] && echo "Requesting $1://$2:$3/$4$5" >&2
	printf '\033]2;%s\007' "astro: $2/$4"

	echo "$1://$2:$3/$4$5" >> "$histfile"

	clear
	certfile=""
	if [ -f "$certdir/$2.crt" ] && [ -f "$certdir/$2.key" ]
	then
		certfile="-cert \"$certdir/$2.crt\" -key \"$certdir/$2.key\""
		[ "$debug" ] && echo "using client cert for domain: $certfile" >&2
	fi

	echo "$1://$2:$3/$4$5" | eval openssl s_client \
		-connect "$2:$3" "$certfile" -crlf -quiet \
		-ign_eof 2> /dev/null | {

		# First line is status and meta information
		read -r status meta
		meta="$(echo "$meta" | tr -d '\r')"
		# shellcheck disable=SC2030
		[ "$debug" ] && echo "Response header: $status $meta" >&2 && sleep 1

		# Validate
		case "$status" in
			10)
				echo "Input needed: $meta" >&2
				echo "Please provide the input:" >&2
				read -r input <&1
				fetch "$1" "$2" "$3" "$4" "?$input"
				return 1
				;;
			11)
				echo "Sensitive input needed: $meta" >&2
				return 2
				;;
			31|32)
				# Redirect
				[ "$debug" ] && echo "Redirect to: $meta" >&2
				# shellcheck disable=SC2046
				read -r proto host port path << EOF
					$(oldhost="$2" oldpath="$4" parseurl "$meta")
EOF
				fetch "$proto" "$host" "$port" "$path"
				return 0
				;;
			40)
				echo "Temporary failure" >&2
				return 3
				;;
			41)
				return 4
				;;
			42)
				return 5
				;;
			43)
				return 6
				;;
			44)
				return 7
				;;
			51)
				echo "Page not found!" >&2
				url="$(getprevious)"
				# shellcheck disable=SC2046
				fetch $(parseurl "$url")
				return 0
				;;
			52)
				return 10
				;;
			53)
				return 11
				;;
			59)
				echo "Bad request: $meta" >&2
				return 12
				;;
			60)
				printf "client certificate required, to create a client cert use the following command:\n\n"
				printf "\topenssl req -x509 -newkey rsa:4096 -keyout $certdir/$2.key -out $certdir/$2.crt -days 36500 -nodes\n\n"
				printf "press 'return' to reload the page or 'b' to go back to the previous page:\n"
				read -r in <&1
				if [ "$in" = "b" ]
				then
					url="$(getprevious)"
					fetch $(parseurl "$url")
				else
					fetch $1 $2 $3 $4 $5
				fi
				return 0
				;;
			61)
				return 14
				;;
			62)
				return 15
				;;
		esac

		# Success
		[ "$debug" ] && echo "Success, reading body"
		[ -f "$linksfile" ] && rm "$linksfile"

		# Set charset
		charset="$(echo "$meta" | grep -i "charset=" | sed -e 's/.*charset=\([^;]\+\).*/\1/Ig')"
		case "$charset" in
			"iso-8859-1" | "ISO-8859-1") charset="iso8859" ;;
			"utf-8" | "UTF-8" | "") charset="utf8" ;;
			"us-ascii" | "US-ASCII") charset="ascii" ;;
		esac
		[ "$debug" ] && echo "Charset: $charset" >&2 && sleep 1

		i=1
		linkcounter=1
		while IFS='' read -r line
		do
			line="$(echo "$line" | tr -d '\r')"
			# shellcheck disable=SC2016
			echo "$line" | grep -q '```' && pre=$((1 - pre)) && line=""

			# Add margins and fold
			if [ "$pre" = 1 ]
			then
				printf '%*s%s\n' "$margin" "" "$line"
			else
				case "$line" in
					"### "*) sty="$sty_header3" && line="$(echo "$line" | cut -c 5- )" ;;
					"## "*) sty="$sty_header2" && line="$(echo "$line" | cut -c 4-)" ;;
					"# "*) sty="$sty_header1" && line="$(echo "$line" | cut -c 3-)" ;;
					"> "*) sty="  $sty_quote" && line="$(echo "$line" | cut -c 3-)" ;;
					"=>"*)
						link="$(echo "$line" | sed -e 's/^=> *\(\S\+\)\(\s*.*\)/\1 \2/g')"
						echo "$link" >> "$linksfile"

						# shellcheck disable=SC2086
						line="$(echo $link | cut -d' ' -f2-)"
						[ -z "$line" ] && line="$link"
						sty="$sty_linkt"
						line="$sty_linkb$linkcounter>$sty_linkt $line"
						linkcounter=$((linkcounter + 1))
						;;
					'* '*) sty="" && line=" $sty_listbâ€¢$sty_listt$(echo "$line" | cut -c 2-)";;
					*) sty="";;
				esac
				echo "$line" | fold -w $width -s | {
					while IFS='' read -r txt
					do
						printf "%*s" "$margin" ""
						# shellcheck disable=SC2059
						printf "$sty$txt\\n"
					done
				}
			fi
		done | LESSCHARSET="$charset" less -k "$LESSKEY" +k -R
		code="$?"

		# Choose what to do next
		[ "$debug" ] && echo "pager exit code: $code" >&2
		case "$code" in
			0) exit 0 ;;
			49)
				# Open url
				printf "Type url: "
				read -r url <&1
				[ "$debug" ] && echo "New url: $url" >&2
				set --
				;;
			50) url="$1://$2:$3/$4" ;;
			51)
				# Follow link
				cat -n "$linksfile"
				printf "Enter link number: "
				read -r i <&1
				url="$(sed "${i}q;d" "$linksfile" | cut -d' ' -f1)"
				;;
			52) url="$(getprevious)" ;;
			53) url="$homepage"; shift $# ;;
			54) 
				echo "Enter description: (optional)"
				read -r desc <&1
				url="$1://$2:$3/$4"
				echo "$url $desc" >> "$bookmarkfile"
				;;
			55)
				cat -n "$bookmarkfile"
				printf "Enter link number: "
				read -r i <&1
				url="$(sed "${i}q;d" "$bookmarkfile" | cut -d' ' -f1)"
		esac

		read -r proto host port path << EOF
$(oldhost="$2" oldpath="$4" parseurl "$url")
EOF
		fetch "$proto" "$host" "$port" "$path"
	}
}

# Execution
export LESS='-P Keys\: qgrbosHmM, to see a description run astro -h'

# Parse arguments
args="$*"
case "$args" in
	'--help'* | '-h'*)
		usage
		exit
		;;
	'--version'*)
		version
		exit
		;;
esac

# Save terminal
tput smcup

# Configuration
confighome=${XDG_CONFIG_HOME:-$HOME/.config}
mkdir -p "$confighome/astro"
configfile="$confighome/astro/astro.conf"
bookmarkfile="$confighome/astro/bookmarks"
certdir="$confighome/astro/certs"
mkdir -p "$certdir"

# Configuration step
if [ -e "$configfile" ]
then
	cachehome="$(grep cachehome "$configfile" | cut -d '=' -f 2,3)"
	margin="$(grep margin "$configfile" | cut -d '=' -f 2,3)"
	homepage="$(grep homepage "$configfile" | cut -d '=' -f 2,3)"
	sty_header1="$(grep style-header1 "$configfile" | cut -d '=' -f 2-)"
	sty_header2="$(grep style-header2 "$configfile" | cut -d '=' -f 2-)"
	sty_header3="$(grep style-header3 "$configfile" | cut -d '=' -f 2-)"
	sty_quote="$(grep style-quote "$configfile" | cut -d '=' -f 2-)"
	sty_linkb="$(grep style-link-bullet "$configfile" | cut -d '=' -f 2-)"
	sty_linkt="$(grep style-link-text "$configfile" | cut -d '=' -f 2-)"
	sty_listb="$(grep style-list-bullet "$configfile" | cut -d '=' -f 2-)"
	sty_listt="$(grep style-list-text "$configfile" | cut -d '=' -f 2-)"
fi

[ -z "$cachehome" ] && cachehome=${XDG_CACHE_HOME:-$HOME/.cache}
cachedir="$cachehome/astro"
mkdir -p "$cachedir"
histfile="$cachedir/history"
linksfile="$cachedir/links"

# move old bookmark file to new location
if [ -f "$cachedir/bookmarks" ] && [ ! -f "$bookmarkfile" ]
then
	mv "$cachedir/bookmarks" "$bookmarkfile"
fi

LESSKEY="$confighome/astro/less.keys"

# Restore terminal
trap 'tput rmcup && rm $histfile $linksfile; exit' EXIT INT HUP

# This is the final binary form, to save space, it corresponds to:
# o (49): go to a URL
# r (50): reload page
# g (51): go to a link
# b (52): go back
# H (53): go to homepage
# m (54): add page to bookmarks
# M (55): go to a bookmark
[ -n "$LESSKEY" ] && echo "AE0rR2MjAG8AmDEAcgCYMgBnAJgzAGIAmDQASACYNQBtAJg2AE0AmDcAZQAAdgAAeEVuZA==" | \
	base64 -d  > "$LESSKEY"

# Default values
[ -z "$margin" ] && margin=8
[ -z "$homepage" ] && homepage="gemini.circumlunar.space/"
[ -z "$sty_header1" ] && sty_header1='35;4;1'
[ -z "$sty_header2" ] && sty_header2='35;4'
[ -z "$sty_header3" ] && sty_header3='35;1'
[ -z "$sty_quote" ] && sty_quote='2;3'
[ -z "$sty_linkb" ] && sty_linkb='35'
[ -z "$sty_linkt" ] && sty_linkt='36;3'
[ -z "$sty_listb" ] && sty_listb='35;1'
[ -z "$sty_listt" ] && sty_listt='0'

# ANSI style code
sty_header1="\\033[${sty_header1}m"
sty_header2="\\033[${sty_header2}m"
sty_header3="\\033[${sty_header3}m"
sty_quote="\\033[${sty_quote}m"
sty_linkb="\\033[${sty_linkb}m"
sty_linkt="\\033[${sty_linkt}m"
sty_listb="\\033[${sty_listb}m"
sty_listt="\\033[${sty_listt}m"

# shellcheck disable=SC2031
[ "$debug" ] && {
	echo "Starting with ${args:-$homepage}"
	echo " - margin:	$margin"
}

# First request
# shellcheck disable=SC2046
fetch $(parseurl "${args:-$homepage}")
